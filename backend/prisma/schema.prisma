generator client { 
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  username      String         @unique
  password      String
  email         String         @unique
  image         String?
  searchHistory SearchHistory[]
  favoriteTV    FavoriteTV[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt @default(now())
}

model Movie {
  id          Int       @id @default(autoincrement())
  title       String
  overview    String
  releaseDate DateTime
  posterPath  String?
  genres      Genre[]   @relation("MovieGenres") // Many-to-many relation with Genre
  movieGenres MovieGenre[] // Add this line to define the opposite relation to MovieGenre
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt @default(now())
}

model Genre {
  id          Int       @id @default(autoincrement())
  name        String
  movies      Movie[]   @relation("MovieGenres") // Many-to-many relation with Movie
  movieGenres MovieGenre[] // Add this line to define the opposite relation to MovieGenre
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt @default(now())
}

model MovieGenre {
  movieId     Int
  genreId     Int
  movie       Movie      @relation(fields: [movieId], references: [id])
  genre       Genre      @relation(fields: [genreId], references: [id])

  @@id([movieId, genreId]) // Composite primary key
}

model SearchHistory {
  id          Int      @id @default(autoincrement())
  userId      Int
  title       String
  image       String
  searchType  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  user User @relation(fields: [userId], references: [id])
}

model FavoriteTV {
  id          Int      @id @default(autoincrement())
  userId      Int
  tvShowId    Int
  title       String
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  user User @relation(fields: [userId], references: [id])
}
